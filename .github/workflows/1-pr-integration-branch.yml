# Unique name for this workflow
name: (1) Integration - Validate PR

# Definition when the workflow should run
on:
    # The workflow will run whenever an event happens on a pull request
    pull_request:
      # The events are that a PR is opened, or when a commit is pushed
      # to a branch that has an existing pull request
      types: [opened, reopened, synchronize]
      # The branches filter allows to specify that this workflow should only
      # run if the branch name is "integration". This way we prevent this workflow
      # from running when PRs are opened on other branches
      branches: [ integration ]
      # We only care about changes to the force-app directory, which is the
      # root directory of the sfdx project. This prevents the job from running
      # when changing non-salesforce files (like this yml file).
      paths:
        - 'force-app/**'
        - 'destructive/**'

# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    Validation-on-Integration-Sandbox:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Now we install Nodejs in the VM, and specify latest version
            - uses: actions/setup-node@v3
              with:
                node-version: 'latest'

            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0

            # Now Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
                  mkdir ~/sf
                  tar xJf sf-linux-x64.tar.xz -C ~/sf --strip-components 1
                  echo "$HOME/sf/bin" >> $GITHUB_PATH
                  ~/sf/bin/sf version

            # Then we install the SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            # This is an awesome plugin that allows us to extract a package.xml with the metadata
            # that has changed between commits. I highly recommend going over the github readme
            # for more information on how this works.

            - name: 'Installing sf git delta'
              run: |
                  echo y | sf plugins:install sfdx-git-delta
                  sf plugins

            # Install java as it is required for the next step
            - name: 'Installing java'
              run: |
                  sudo apt-get update
                  sudo apt-get install openjdk-8-jdk

            # Install SFDX scanner
            - name: 'Installing SF scanner'
              run: sf plugins install @salesforce/sfdx-scanner

            # Prior to setting up this workflow, you have to create a Github Secret
            # that contains the sfdx url of the integration org.

            # The steps to generate the url are here
            # https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_auth_sfdxurl.htm

            # This URL can then be used with the sfdx auth:sfdxurl:store to authenticate
            # the sfdx project in the repository, against the org from which the URL
            # was generated from. This works just like that, there's no need to create
            # connected apps or any else.

            # The URL is stored in the Github Secret named SFDX_INTEGRATION_URL
            # so here we store the URL into a text file
            - name: 'Populate auth file with SF_URL secret of integration org'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt

            # Authenticate to org using the URL stored in the text file
            - name: 'Authenticate to Integration Org'
              run: sf org login sfdx-url -f ./SFDX_INTEGRATION_URL.txt -s -a integration

            # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch.
            # This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: |
                  mkdir changed-sources
                  sf sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

            # If the env variable equals all, we run all tests
            - name: 'Check-only deploy delta changes - run all tests'
              if: ${{contains(needs.repository_dispatch.paths, 'force-app/') }}
              run: |
                  sf project deploy start --source-dir "changed-sources/force-app" --test-level RunLocalTests --dry-run --json
              else:
                echo: not evaluated
            
            - name: 'Deploy destructive changes (if any)'
              if: ${{contains(needs.repository_dispatch.paths, 'destructive/') }}
              run: sf project deploy start --manifest destructive/package.xml --post-destructive-changes destructive/destructiveChangesPost.xml --test-level RunLocalTests --dry-run --json
